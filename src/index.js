// Generated by CoffeeScript 1.7.1
(function() {
  var $activeTreeDesc, $activeTreeName, $nodeList, $select, $subjectList, $treeForm, $treeInput, $treeList, Chief, activeChief, activeSubject, activeSubjectId, addTree, alertify, b3, cActiveTree, cActiveTreeId, chiefList, closeSubject, closeTree, dragNode, env, enviroments, firebase, gridSize, handleTreeChange, hideMemoryPanel, imageExists, loadData, loadNodes, loadSubjects, loadTreeList, memory, nodes, openSubject, openTree, playing, removeTree, setupFirebase, showMemoryPanel, tickInterval, tickIntervalRef, timer, toggleInput, toggleSubject, toggleTree, treantContainer, treeLoader, _, _i, _len;

  require('./css/main.css');

  require('./css/tree.css');

  require('./css/panel.css');

  require('./css/controls.css');

  require('./css/jsoneditor-dark.css');

  _ = require('lodash');

  b3 = require('b3');

  Chief = require('behavior3-chief');

  firebase = require('tauros-firebase/b3manager');

  alertify = require('alertify.js');

  alertify.logPosition('bottom right');

  require('./tabs');

  treeLoader = require('./treeLoader');

  memory = require('./memory');

  nodes = [
    {
      name: 'RandomStep',
      base: 'Action',
      tick: function() {}
    }, {
      name: 'IsStill',
      base: 'Condition',
      tick: function() {}
    }
  ];

  gridSize = 50;

  document.addEventListener('keydown', function(evt) {
    var memoryWidth, panelWidth;
    if (evt.keyCode === 9 && !document.activeElement.getAttribute('contenteditable')) {
      evt.preventDefault();
      panelWidth = $('#panel').width() === 350 ? '0px' : '350px';
      memoryWidth = $('#memory').width() === 350 ? '0px' : '350px';
      $('#panel').width(panelWidth);
      $('#memory').width(memoryWidth);
      if (cActiveTree) {
        return treeLoader.redrawTree(false);
      }
    }
  });

  chiefList = {};

  activeChief = null;

  cActiveTreeId = null;

  cActiveTree = null;

  timer = null;

  $select = $('#select');

  $treeForm = $('#trees .panelInput');

  $treeInput = $('#trees input');

  $treeList = $('#treeList');

  $nodeList = $('#nodeList');

  $subjectList = $('#subjectList');

  $activeTreeName = $('#activeTreeName');

  $activeTreeDesc = $('#activeTreeDesc');

  treantContainer = document.getElementById('treant');

  setupFirebase = function(envName) {
    var adapter, app, firebaseRef;
    if (chiefList[envName]) {
      activeChief = chiefList[envName];
      loadData();
      return;
    }
    app = firebase.connect(envName);
    firebaseRef = app.database().ref();
    activeChief = Chief.create({
      nodes: nodes
    });
    chiefList[envName] = activeChief;
    adapter = Chief.adapter.Firebase({
      chief: activeChief,
      firebaseRef: firebaseRef
    });
    return adapter.sync().then(function() {
      return loadData();
    });
  };

  loadData = function() {
    loadTreeList();
    loadNodes();
    return loadSubjects();
  };

  enviroments = firebase.listEnvironments();

  for (_i = 0, _len = enviroments.length; _i < _len; _i++) {
    env = enviroments[_i];
    $select.append($('<option>', {
      value: env,
      text: env
    }));
    if (activeChief === null) {
      setupFirebase(env);
    }
  }

  $select.on('change', function(evt) {
    if (cActiveTreeId) {
      closeTree();
    }
    return setupFirebase(evt.target.value);
  });

  $treeInput.on('keyup', function(evt) {
    if (evt.keyCode === 13) {
      addTree($treeInput.val());
      $treeInput.focus();
      return toggleInput();
    }
  });

  $treeForm.find('button').on('click', function() {
    addTree($treeInput.val());
    return toggleInput();
  });

  $('#addTree').on('click', function() {
    return toggleInput();
  });

  toggleInput = function() {
    $(this).toggleClass('active');
    return $treeForm.toggleClass('hidden');
  };

  loadTreeList = function() {
    var $erase, $li, cTree, cTreeList, _j, _len1, _results;
    cTreeList = activeChief.listTrees();
    $treeList.empty();
    _results = [];
    for (_j = 0, _len1 = cTreeList.length; _j < _len1; _j++) {
      cTree = cTreeList[_j];
      $li = $('<li>' + cTree.getName() + '</li>').appendTo($treeList);
      $erase = $("<i>delete</i>").addClass('material-icons').appendTo($li);
      $erase.on('click', removeTree(cTree.getId()));
      $li.attr('data', cTree.getId());
      _results.push($li.on('click', toggleTree(cTree, $li)));
    }
    return _results;
  };

  handleTreeChange = function(change) {
    var cNewParent, cNode, cNodeA, cNodeB, cParent, cRootNode, child, children, eraseChildren, indexA, indexB, _j, _k, _len1, _len2;
    eraseChildren = function(cNode) {
      var child, children, _j, _len1;
      children = cNode.getChildren();
      for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
        child = children[_j];
        cActiveTree.removeNode(child);
        eraseChildren(child);
      }
      return cActiveTree.removeNode(cNode);
    };
    switch (change.action) {
      case 'createRoot':
        cRootNode = cActiveTree.createNode(change.nodeName);
        if (cRootNode.acceptsChildren()) {
          cActiveTree.setRootNode(cRootNode);
          return treeLoader.addRootNode(cRootNode);
        } else {
          return alertify.error('Add node that accepts children');
        }
        break;
      case 'addNode':
        cNode = cActiveTree.createNode(change.nodeName);
        cActiveTree.addNode(cNode);
        cParent = cActiveTree.getNode(change.parentCId);
        if (cParent.acceptsChildren()) {
          cParent.addChild(cNode);
          return treeLoader.addNodeToTree(cNode, change.parentTId);
        } else {
          return alertify.error('Node does not accept children');
        }
        break;
      case 'removeNode':
        cNode = cActiveTree.getNode(change.cNodeId);
        eraseChildren(cNode);
        return treeLoader.redrawTree();
      case 'switchNodes':
        cNodeA = cActiveTree.getNode(change.cNodeIdA);
        cNodeB = cActiveTree.getNode(change.cNodeIdB);
        cParent = cNodeA.getParent();
        children = cParent.getChildren();
        indexA = children.indexOf(cNodeA);
        indexB = children.indexOf(cNodeB);
        for (_j = 0, _len1 = children.length; _j < _len1; _j++) {
          child = children[_j];
          cParent.removeChild(child);
        }
        children.splice(indexA, 1, cNodeB);
        children.splice(indexB, 1, cNodeA);
        for (_k = 0, _len2 = children.length; _k < _len2; _k++) {
          child = children[_k];
          cParent.addChild(child);
        }
        return treeLoader.redrawTree();
      case 'changeParent':
        cNode = cActiveTree.getNode(change.cNodeId);
        cParent = cNode.getParent();
        cNewParent = cActiveTree.getNode(change.parentCId);
        if (cNewParent.acceptsChildren()) {
          cParent.removeChild(cNode);
          cNewParent.addChild(cNode);
          treeLoader.changeParent(change.tNodeId, change.parentTId);
          return treeLoader.redrawTree();
        } else {
          return alertify.error('Node does not accept children');
        }
        break;
      case 'showNodeMemory':
        if (activeSubject) {
          cNode = cActiveTree.getNode(change.cNodeId);
          return memory.loadNodeMemory(activeSubject, cNode);
        }
    }
  };

  toggleTree = function(cTree, $li) {
    return function() {
      var activeSubject, loadingId;
      loadingId = cTree.getId();
      $treeList.find('li').removeClass('active');
      if (cActiveTreeId === loadingId) {
        closeTree();
        return;
      }
      if (cActiveTreeId) {
        closeTree();
      }
      if (cActiveTreeId !== loadingId) {
        openTree(loadingId, cTree, $li);
      }
      if (cActiveTree) {
        activeSubject = activeChief.addSubject(cActiveTree);
        return loadSubjects();
      } else {
        activeSubject = null;
        return loadSubjects();
      }
    };
  };

  openTree = function(id, cTree, $li) {
    treeLoader.loadTree(cTree, gridSize, handleTreeChange);
    cActiveTreeId = id;
    $li.addClass('active');
    cActiveTree = activeChief.getTree(id);
    $activeTreeName.html(cActiveTree.getName());
    return $activeTreeDesc.html(cActiveTree.getDescription());
  };

  closeTree = function() {
    treeLoader.closeTree(cActiveTreeId);
    cActiveTreeId = null;
    $activeTreeName.html('');
    $activeTreeDesc.html('');
    return $('#controls').hide();
  };

  addTree = function(name) {
    var newTree;
    newTree = activeChief.createTree();
    newTree.setName(name);
    newTree.setDescription('Lorem ipsum dolor sit amet');
    activeChief.addTree(newTree);
    return loadTreeList();
  };

  removeTree = function(cTreeId) {
    return function(evt) {
      evt.stopPropagation();
      closeTree();
      activeChief.removeTree(cTreeId);
      return loadTreeList();
    };
  };

  $activeTreeDesc.on('input', function() {
    return cActiveTree.setDescription($activeTreeDesc.html());
  });

  $activeTreeName.on('input', function() {
    return cActiveTree.setName($activeTreeName.html());
  });

  dragNode = function(evt) {
    var transfer;
    transfer = JSON.stringify({
      type: 'add',
      name: evt.target.getAttribute('data')
    });
    return evt.dataTransfer.setData('text/plain', transfer);
  };

  imageExists = function(imageUrl) {
    var http;
    http = new XMLHttpRequest();
    http.open('HEAD', imageUrl, false);
    http.send();
    return http.status !== 404;
  };

  loadNodes = function() {
    var $img, $label, $li, $ul, cNodeList, category, key, node, order, sortedList, testUrl, url, _j, _len1, _results;
    cNodeList = activeChief.listBehaviorNodes();
    sortedList = _.groupBy(cNodeList, 'category');
    order = ['composite', 'decorator', 'action', 'condition'];
    $nodeList.empty();
    _results = [];
    for (_j = 0, _len1 = order.length; _j < _len1; _j++) {
      key = order[_j];
      category = sortedList[key];
      $('<h5>' + key + 's' + '</h5>').appendTo($nodeList);
      $ul = $('<ul></ul>').appendTo($nodeList);
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (key in category) {
          node = category[key];
          $li = $('<li></li>').attr('draggable', 'true').appendTo($ul);
          $img = $('<span></span>').addClass('nodeIcon').appendTo($li);
          testUrl = '/assets/nodes/' + node.name.toLowerCase() + '.png';
          if (imageExists(testUrl)) {
            url = testUrl;
          } else {
            url = './assets/nodes/' + node.category + '.png';
          }
          $img.css('background-image', "url('" + url + "')");
          $label = $("<span class='nodeLabel'>" + node.name + '</span>').appendTo($li);
          $li.attr('data', node.name);
          _results1.push($li.on('dragstart', function(evt) {
            return dragNode(evt);
          }));
        }
        return _results1;
      })());
    }
    return _results;
  };

  activeSubject = null;

  activeSubjectId = null;

  loadSubjects = function() {
    var $li, cSubjectList, subject, _j, _len1, _results;
    cSubjectList = activeChief.listSubjects();
    $subjectList.empty();
    _results = [];
    for (_j = 0, _len1 = cSubjectList.length; _j < _len1; _j++) {
      subject = cSubjectList[_j];
      $li = $('<li>' + subject.getId() + '</li>').appendTo($subjectList);
      $li.attr('data', subject.getId());
      _results.push($li.on('click', toggleSubject(subject, $li)));
    }
    return _results;
  };

  toggleSubject = function(subject, $li) {
    return function() {
      var loadingId;
      loadingId = subject.getId();
      $subjectList.find('li').removeClass('active');
      if (activeSubjectId === loadingId) {
        $activeTreeName.html(cActiveTree.getName());
        closeSubject();
        return;
      }
      if (activeSubjectId) {
        closeSubject();
      }
      if (activeSubjectId !== loadingId) {
        return openSubject(loadingId, subject, $li);
      }
    };
  };

  openSubject = function(id, subject, $li) {
    activeSubjectId = id;
    activeSubject = subject;
    $li.addClass('active');
    $('#controls').show();
    $activeTreeName.html(cActiveTree.getName() + ': ' + activeSubjectId);
    showMemoryPanel();
    memory.loadTreeMemory(cActiveTree, activeSubject);
    return memory.loadSubjectMemory(activeSubject);
  };

  closeSubject = function() {
    $('#controls').hide();
    activeSubjectId = null;
    hideMemoryPanel();
    return memory.clearMemory();
  };

  showMemoryPanel = function() {
    $('#memory').removeClass('hidden');
    return treeLoader.getActiveTree().resize();
  };

  hideMemoryPanel = function() {
    $('#memory').addClass('hidden');
    return treeLoader.getActiveTree().resize();
  };

  playing = false;

  tickInterval = 100;

  tickIntervalRef = null;

  $('#play').on('click', function() {
    if (playing === false) {
      playing = true;
      memory.disableEditors();
      $(this).removeClass('play').addClass('stop');
      return tickIntervalRef = setInterval((function() {
        return activeChief.tick();
      }), tickInterval);
    } else {
      playing = false;
      memory.enableEditors();
      treeLoader.clearAllNodes();
      $(this).removeClass('stop').addClass('play');
      clearInterval(tickIntervalRef);
      activeSubject.getMemory().forget();
      return console.log('memory cleared');
    }
  });

  $('#step').on('click', function() {
    return activeChief.tick();
  });

}).call(this);
